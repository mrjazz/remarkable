import fs = require('fs');
import md = require('markdown-it');
import path = require('path');


export const readContentFromFile = (path) => fs.readFileSync(path).toString();

export const foamCleanUp = (content) => content.replace(/\[\/\/begin\][\s\S]*"Autogenerated link references"/mg, "").trim();

export const renderMarkdown = (markdown) => md({
  html: true,
  linkify: true,
  typographer: true
}).render(foamCleanUp(markdown));

export const renderPage = (path) => renderMarkdown(readContentFromFile(path));

export const markHighlight = (html, searchText) => {
  //console.log(html, searchText);
  const highligth = `<span class='found'>${searchText}</span>`;
  const regExp = new RegExp(searchText, 'gi');

  const highlightedHtml = html.replace(regExp, highligth);
  return highlightedHtml.replace(/<a(.*)>(.*?)<\/a>/gi, (outer, inner) => {      
      if (inner.indexOf(highligth) > 0) {
        return outer.replace(highligth, searchText);
      }
      return outer;
    });
};

export const replaceWikiLinks = (html, getLink) => {    
  return html.replace(/\[\[(.*?)\]\]/gi, (outer, inner) => {    
    const link = getLink(inner);
    if (link) {
      return '<a href="' + link + '">[[' + inner + ']]</a>';
    }
    return outer;
  });
};

function addMdIfMissed(s: string): string {
  return s.substr(s.length - 3).toLowerCase() === '.md' ? s : s + '.md';
}

export function formatLink(s: string) {
  return addMdIfMissed(path.basename(s).toLowerCase().replace(' ', '-'));
}

export function fileToTitle(filePath: string) {
  return addMdIfMissed(path.basename(filePath)) // add .md if missed
      .slice(0, -3) // remove .md at the end
      .replace(/^\w/, (c) => c.toUpperCase()); // capitalize first letter
}
